* Exercise 14 - Play with our fresh new k8s cluster
  - Description :: Play with the fresh new Kubernetes cluster and try to answer the questions. We use =kubectl= CLI to operate on the cluster. See the =kubectl= CLI overview here: [[https://kubernetes.io/docs/reference/kubectl/overview/][https://kubernetes.io/docs/reference/kubectl/overview/]]

    1) Practice with =kubectl=
    2) List the k8s cluster nodes
    3) List the Resources
    4) List the Objects
    5) List the Workload
    6) Start some workload
    7) Scale the workload
    8) Access the Pod interactively
    9) Show environments variables
    10) Kill the Pod
    11) What is happening? Why we cannot delete those 5 Pods?

* Solutions and Instructions
** Ensure to point your client to your cluster
   Each user point by default to its own =~/.kube/config= file, for multiple cluster we will use =contexts=

   You can choose to use another =kubeconfig= file by setting the =KUBECONFIG= environment variable, and this should be done each time you open a new terminal. *Only if you do not want to use the default configuration*
   #+BEGIN_SRC sh
   export KUBECONFIG="PATH/TO/YOUR/CUSTOM_CONFIG"
   #+END_SRC

** Play with kubeconfig file
   Show current context
   #+BEGIN_SRC sh
   kubectl config current-context
   #+END_SRC

   Show available clusters
   #+BEGIN_SRC sh
   kubectl config get-clusters
   #+END_SRC

   Show =kubeconfig= file (/without manually hide private info.../)
   #+BEGIN_SRC sh
   kubectl config view
   #+END_SRC

** Play with your cluster
    1) Practice with =kubectl=
       #+BEGIN_SRC sh
       kubectl help
       kubectl get --help
       #+END_SRC
    2) List the k8s cluster nodes
       #+BEGIN_SRC sh
       kubectl get nodes
       #+END_SRC
    3) List the Resources
       #+BEGIN_SRC sh
       kubectl api-resources
       #+END_SRC
    4) List the Objects
       #+BEGIN_SRC sh
       kubectl get all
       #+END_SRC
    5) List the Workload
       #+BEGIN_SRC sh
       kubectl get pod
       #+END_SRC
    6) Start some workload
       #+BEGIN_SRC sh
       kubectl run --image=jpetazzo/clock myclock-pod
       kubectl create deployment --image=jpetazzo/clock myclock-dep
       #+END_SRC
    7) Scale the workload
       #+BEGIN_SRC sh
       kubectl scale deployment myclock-dep --replicas=5
       #+END_SRC
    8) Access one of those Pod interactively
       /Replace =POD_NAME= accordinlgy/
       #+BEGIN_SRC sh
       kubectl exec -it POD_NAME -- /bin/sh
       #+END_SRC
    9) Show environments variables and exit from the Pod
       #+BEGIN_SRC sh
       env
       exit
       #+END_SRC
    10) Kill the Pod =myclock-pod=
	#+BEGIN_SRC sh
	kubectl delete pod myclock-pod --wait=false
	#+END_SRC
    11) Kill the Pod =myclock-dep-*=
	#+BEGIN_SRC sh
	kubectl delete pod POD_NAME --wait=false
	#+END_SRC
    12) *Question: What is happening? Why we cannot delete those 5 Pods?*
	- Pods are restart by someone... Who is restarting our Pods?
	- The Kubernetes object called =RelicaSet= is doing that !!!
	- Hint: You could discover it with this command: =kubectl get rs=
