* Exercise 03 - Setup an SSH tunnel and use it as a socks proxy in a web Browser
  - Description :: Setup a browser to use SSH based Socks Proxy tunnel. Create a tunnel from your laptop to the Lan VM. Finally verify that you, _and only you_, are able to reach your VM behind the firewall using this setup.


* Solutions and Instructions
** Configure a browser to use a socks proxy
This section depends heavily on your browser and even on your browser version, alternatively you can use an extensions, see below.

In order to properly start a SOCKS proxy server we need to identify the =$SOCKS_ADDR= and the =$SOCKS_PORT= where it will listen for connections to proxies on the tunnel.

Given that the tunnel is setup on your laptop you can just make it listen on the loopback interface (=127.0.0.1=) and on a port of your choice from the high unprivileged port range, eg: =8888=. Let's say we will use:

#+begin_example
$SOCKS_ADDR=127.0.0.1
$SOCKS_PORT=8888
#+end_example

*** Using a browser extension (preferred choice)
Jump [[https://addons.mozilla.org/en-US/firefox/addon/switchyomega/][here]], install the extension and confgiure a new entry similarly as explained for the method below.

*** Configuring your browser
The examples are for a modern version of Firefox.

Optionally, you can create a profile in your preferred browser, for firefox starts with:
#+begin_src sh
firefox --no-remote --ProfileManager
#+end_src

In Firefox under the network setting add a socks proxy with the address the =$SOCKS_ADDR= and with the port the =$SOCKS_PORT= identified above.

[[file:ff-socks.png]]

In very recent version of firefox you will also need to set =network.proxy.allow_hijacking_localhost= to =true= in =about:config=, see [[https://bugzilla.mozilla.org/show_bug.cgi?id=1535581][https://bugzilla.mozilla.org/show_bug.cgi?id=1535581]]

[[file:ff-settings.png]]

** Launch the tunnel
Launch an ssh connection with socks support. Read [[https://en.wikipedia.org/wiki/SOCKS][here]] to better understand what a Socks Proxy is and how it works.
#+begin_src sh
  ssh -D ${SOCKS_ADDR}:${SOCKS_PORT} $USER@$SERVER
#+end_src

** Group placeholder
During the lab we will often use a placeholder derived from the group name in order to avoid TCP/UDP ports overlapping or conflicting in allocating shared resources. Usually this will be done deriving the group number from the =username= and using this number to create a placeholder for each group/user.

For example: if you are from group =11=, then your =$USER= is =grp11= and your placeholder is =11=. This can be derived from the group name using the following replacement pattern =${USER: -2}=.

#+begin_src sh
echo "My PORT is: 99${USER: -2}"
#+end_src

** Create a dummy service on the Lab VM
The below simple snippet will expose a web server that shows the content of the file =index.html=.
#+begin_src sh
  mkdir ws
  cd ws
  echo "Hello from DDaO Lab Web Server" > index.html
  python3 -m http.server 99${USER: -2}
#+end_src

Now we have two ways of connecting to this web-server: 1) Without SSH tunnel and a normal browser and 2) With SSH tunnel through the modified browser:

1) Identify the server address (=$SERVER=) and the port (=99${USER: -2}=) and open on *your normal browser* the following URL: =http://$SERVER:$PORT=.

2) Identify the exposed port (for group =11= with user =grp11= the port is =9911=) and open on *your modified browser* the following URL: =http://localhost:$PORT=.



What do you see in the browser? What do you see in the terminal? Where are the connections coming from?
